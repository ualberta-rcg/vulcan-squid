# Squid Main Configuration - Core Squid proxy settings and access controls
# This ConfigMap contains the main Squid configuration with security ACLs and port settings
apiVersion: v1
kind: ConfigMap
metadata:
  name: entrypoint
  namespace: proxy
data:
  squid.conf: |
    # Network Access Control Lists (ACLs)
    # Define trusted local networks
    acl localnet src 0.0.0.1-0.255.255.255  # RFC 1122 "this" network (LAN)
    acl localnet src 10.0.0.0/8             # RFC 1918 local private network (LAN)
    acl localnet src 100.64.0.0/10          # RFC 6598 shared address space (CGN)
    acl localnet src 169.254.0.0/16         # RFC 3927 link-local (directly plugged) machines
    acl localnet src 172.16.0.0/12          # RFC 1918 local private network (LAN)
    acl localnet src 192.168.0.0/16         # RFC 1918 local private network (LAN)
    acl localnet src fc00::/7               # RFC 4193 local private network range
    acl localnet src fe80::/10              # RFC 4291 link-local (directly plugged) machines
    acl localnet src 127.0.0.0/24           # Localhost range
    
    # Port-based ACLs for security
    acl SSL_ports port 443
    acl Safe_ports port 80          # http
    acl Safe_ports port 21          # ftp
    acl Safe_ports port 443         # https
    acl Safe_ports port 70          # gopher
    acl Safe_ports port 210         # wais
    acl Safe_ports port 1025-65535  # unregistered ports
    acl Safe_ports port 280         # http-mgmt
    acl Safe_ports port 488         # gss-http
    acl Safe_ports port 591         # filemaker
    acl Safe_ports port 777         # multiling http
    
    # Security rules
    http_access deny !Safe_ports
    http_access deny CONNECT !SSL_ports
    http_access allow localnet manager
    
    # Peer communication for cache clustering
    acl digest_request url_regex ^http://[^/]+/squid-internal-periodic/store_digest$
    http_access allow localnet digest_request
    acl netdb_request url_regex ^http://[^/]+/squid-internal-dynamic/netdb$
    http_access allow localnet netdb_request
    
    # Allow localhost access
    http_access allow localhost
    
    # Include additional configuration files
    include /etc/squid/conf.d/*.conf
    include /tmp/squid-conf/*.conf
    
    # Deny all other access
    http_access deny all
    
    # HTTP proxy port with high concurrency settings
    http_port 31234
    
    # Core dump directory
    coredump_dir /var/spool/squid
    
    # PID file location
    pid_filename /tmp/squid.pid
    
    # High concurrency settings for HPC cluster
    max_filedescriptors 65536
    client_persistent_connections on
    server_persistent_connections on
    persistent_request_timeout 60 seconds
    client_lifetime 1 hour
    
    # Logging to stdout/stderr for container logging
    access_log stdio:/dev/stdout squid
    cache_log stdio:/dev/stderr
    cache_store_log stdio:/dev/stderr
    
    # Refresh patterns for different content types
    refresh_pattern ^ftp:           1440    20%     10080
    refresh_pattern ^gopher:        1440    0%      1440
    refresh_pattern -i (/cgi-bin/|\?) 0     0%      0
    
    # Package manager refresh patterns (apt/deb repositories)
    refresh_pattern \/(Packages|Sources)(|\.bz2|\.gz|\.xz)$ 0 0% 0 refresh-ims
    refresh_pattern \/Release(|\.gpg)$ 0 0% 0 refresh-ims
    refresh_pattern \/InRelease$ 0 0% 0 refresh-ims
    refresh_pattern \/(Translation-.*)(|\.bz2|\.gz|\.xz)$ 0 0% 0 refresh-ims
    
    # Default refresh pattern
    refresh_pattern .               0       20%     4320
  peer-discovery.sh: |
    #!/bin/sh
    set -eu

    SERVICE_DNS="${SERVICE_DNS:-squid-peers.proxy.svc.cluster.local}"
    HTTP_PORT="${HTTP_PORT:-31234}"
    ICP_PORT="${ICP_PORT:-31235}"   # if using HTCP set 4827 and add " htcp" below
    INTERVAL="${INTERVAL:-15}"
    OUT_DIR="/tmp/squid-conf"
    OUT_FILE="$OUT_DIR/99-peers.conf"
    TMP_FILE="$(mktemp)"
    MYIP="${MY_POD_IP:-$(hostname -i | awk '{print $1}')}"

    mkdir -p "$OUT_DIR"
    [ -f "$OUT_FILE" ] || : > "$OUT_FILE"

    resolve_ips() {
      # Prefer getent; fall back to nslookup/host/dig
      if command -v getent >/dev/null 2>&1; then
        getent hosts "$SERVICE_DNS" | awk '{print $1}'
      elif command -v nslookup >/dev/null 2>&1; then
        nslookup -type=A "$SERVICE_DNS" 2>/dev/null | awk '/^Address: /{print $2}'
      elif command -v host >/dev/null 2>&1; then
        host "$SERVICE_DNS" 2>/dev/null | awk '/ has address /{print $4}'
      elif command -v dig >/dev/null 2>&1; then
        dig +short A "$SERVICE_DNS"
      else
        echo "No DNS tool found" >&2
        return 1
      fi
    }

    render_file() {
      ips="$(resolve_ips | sort -u | grep -v -F "$MYIP")"
      {
        for ip in $ips; do
          printf 'cache_peer %s sibling %s %s proxy-only\n' "$ip" "$HTTP_PORT" "$ICP_PORT"
        done
      } > "$TMP_FILE"   # single redirection here, not inside the loop
    }

    # Initial render
    render_file
    mv "$TMP_FILE" "$OUT_FILE"

    # Loop with change detection
    while sleep "$INTERVAL"; do
      TMP_FILE="$(mktemp)"
      if render_file && { [ ! -f "$OUT_FILE" ] || ! cmp -s "$TMP_FILE" "$OUT_FILE"; }; then
        mv "$TMP_FILE" "$OUT_FILE"
        squid -k reconfigure || true
      else
        rm -f "$TMP_FILE"
      fi
    done